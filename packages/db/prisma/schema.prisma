generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  admin         Boolean   @default(false)
  token         String?

  accounts  Account[]
  sessions  Session[]
  comments  Comment[]
  votes     Vote[]
  bookmarks Bookmark[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            Int       @id @default(autoincrement())
  title         String
  link          String
  linkType      LinkType
  description   String?
  thumbnail     String?
  hidden        Boolean   @default(false)
  comments      Comment[]
  commentsCount Int       @default(0)
  createdAt     DateTime  @default(now())
  bookmark      Bookmark?
  type          PostType
  upvotes       Int       @default(0)
  downvotes     Int       @default(0)
  votes         Vote[]
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Comment {
  id           Int         @id @default(autoincrement())
  content      String
  commentType  CommentType @default(DEFAULT)
  approved     Boolean     @default(false)
  postId       Int
  commentedOn  Post        @relation(fields: [postId], references: [id])
  parentId     Int?
  parent       Comment?    @relation("ParentComment", fields: [parentId], references: [id])
  children     Comment[]   @relation("ParentComment")
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  upvotes      Int         @default(0)
  downvotes    Int         @default(0)
  repliesCount Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  votes        Vote[]
  isPinned     Boolean     @default(false)
}

model Vote {
  id        Int      @id @default(autoincrement())
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  voteType  VoteType // enum
  createdAt DateTime @default(now())

  @@unique([commentId, userId, postId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum PostType {
  SHORT
  LONG
}

enum LinkType {
  YOUTUBE
  DISCORD
}

enum CommentType {
  INTRO
  DEFAULT
}
